<!DOCTYPE html>
<html lang="en">
  <head>
    <title>three.js webgl - collada</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
      body {
        font-family: Monospace;
        background-color: #000000;
        margin: 0px;
        overflow: hidden;
      }

      a { color: skyblue }
    </style>
  </head>
  <body>
    <script src="js/three.min.js"></script>
    <script src="js/ColladaLoader.js"></script>
    <script src="js/Detector.js"></script>

    <script>

      if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

      var container;

      var camera, scene, renderer, objects;
      var particleLight;
      var dae;

      var loader = new THREE.ColladaLoader();
      loader.options.convertUpAxis = true;
      loader.load( 'test.dae', function ( collada ) {

        dae = collada.scene;

        dae.traverse( function ( child ) {

        } );

 //       dae.scale.x = dae.scale.y = dae.scale.z = 0.002;
        dae.updateMatrix();

        init();
        animate();
      } );

      function init() {

        container = document.createElement( 'div' );
        document.body.appendChild( container );

        camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
        camera.position.set( 2, 2, 3 );

        scene = new THREE.Scene();

        // Grid

        var size = 14, step = 1;

        var geometry = new THREE.Geometry();
        var material = new THREE.LineBasicMaterial( { color: 0x303030 } );

        for ( var i = - size; i <= size; i += step ) {

          geometry.vertices.push( new THREE.Vector3( - size, - 0.04, i ) );
          geometry.vertices.push( new THREE.Vector3(   size, - 0.04, i ) );

          geometry.vertices.push( new THREE.Vector3( i, - 0.04, - size ) );
          geometry.vertices.push( new THREE.Vector3( i, - 0.04,   size ) );

        }

        var line = new THREE.LineSegments( geometry, material );
        scene.add( line );

        // Add the COLLADA

        scene.add( dae );

        // Lights
        particleLight = new THREE.Mesh( new THREE.SphereGeometry( 4, 8, 8 ), new THREE.MeshBasicMaterial( { color: 0xffffff } ) );



        scene.add( new THREE.AmbientLight( 0xcccccc ) );
        var directionalLight = new THREE.DirectionalLight(/*Math.random() * 0xffffff*/0xeeeeee );
        directionalLight.position.x = Math.random() - 0.5;
        directionalLight.position.y = Math.random() - 0.5;
        directionalLight.position.z = Math.random() - 0.5;
        directionalLight.position.normalize();
        scene.add( directionalLight );

        var pointLight = new THREE.PointLight( 0xffffff, 4 );
        particleLight.add( pointLight );

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );


        //

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

      }

      //

      function animate() {
        requestAnimationFrame( animate );
        render();

      }

      var clock = new THREE.Clock();

      function render() {

        var timer = Date.now() * 0.0005;

        camera.position.x = Math.cos( timer ) * 10;
        camera.position.y = 2;
        camera.position.z = Math.sin( timer ) * 10;

        camera.lookAt( scene.position );

        particleLight.position.x = Math.sin( timer * 4 ) * 3009;
        particleLight.position.y = Math.cos( timer * 5 ) * 4000;
        particleLight.position.z = Math.cos( timer * 4 ) * 3009;

//        THREE.AnimationHandler.update( clock.getDelta() );

        renderer.render( scene, camera );

      }

    </script>
  </body>
</html>
